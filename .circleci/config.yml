version: 2.1

executors:
  maven-executor:
    docker:
      - image: circleci/openjdk:11-jdk
commands:
  configure-gpg:
    steps:
      - run:
          name: Configure GPG private key for signing project artifacts in OSS Sonatype
          command: |
            echo $SECRING_GPG_ASC_BASE64 | base64 --decode | gpg --batch --no-tty --import --yes
  restore-maven-cache:
    steps:
      - restore_cache:
          keys:
          - maven-m2-v1-{{ .Branch }}-{{ checksum "pom.xml" }}
          - maven-m2-v1-{{ .Branch }}
          - maven-m2-v1
      - run:
          name: Retrieve all Maven plugins and dependencies
          command: |
            mvn  -s .circleci/maven-release-settings.xml -Prelease -Preporting -Pallow-snapshots --fail-never dependency:go-offline || true
  save-maven-cache:
    steps:
      - save_cache:
          paths:
            - ~/.m2
          key: maven-m2-v1-{{ .Branch }}-{{ checksum "pom.xml" }}
jobs:
  build-and-test:
    executor: maven-executor
    steps:
      - checkout
      - restore-maven-cache
      - configure-gpg
      - run:
          name: Build and test Java code
          command: mvn -Prelease -Pallow-snapshots verify
      - save-maven-cache
      - persist_to_workspace:
          root: .
          paths:
            - .
      - store_artifacts:
          path: target
          destination: artifacts/parent
      - store_artifacts:
          path: swid-builder/target
          destination: artifacts/swid-builder
      - store_artifacts:
          path: swid-maven-plugin/target
          destination: artifacts/swid-maven-plugin
      - store_artifacts:
          path: swid-repo-client/target
          destination: artifacts/swid-repo-client
      - store_artifacts:
          path: swidval/target
          destination: artifacts/swidval
      - store_artifacts:
          path: swidval-webapp/target
          destination: artifacts/swidval-webapp
  deploy-release:
    executor: maven-executor
    steps:
      - attach_workspace:
          at: .
      - restore-maven-cache
      - configure-gpg
      - run:
          name: Deploy new RELEASE to Maven Central
          command: |
            mvn -s .circleci/maven-release-settings.xml -Prelease clean verify nexus-staging:deploy -DskipRemoteStaging=true
            mvn -s .circleci/maven-release-settings.xml -Prelease nexus-staging:deploy-staged -DstagingDescription="Preparing release"
            # mvn -s .circleci/maven-release-settings.xml -Prelease deploy
      - save-maven-cache
  deploy-snapshot:
    executor: maven-executor
    steps:
      - attach_workspace:
          at: .
      - restore-maven-cache
      - configure-gpg
      - run:
          name: Deploy new SNAPSHOT to Maven Central
          command: |
            release_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            if [[ $release_version == *-SNAPSHOT ]]; then
              mvn -s .circleci/maven-release-settings.xml -Prelease deploy
            fi
      - save-maven-cache
  deploy-site:
    executor: maven-executor
    steps:
      - attach_workspace:
          at: .
      - restore-maven-cache
      - run:
          name: Build Site with Maven
          command: |
            mvn -Preporting -Prelease package site site:stage
      - save-maven-cache
      - add_ssh_keys:
          fingerprints:
            - "b5:78:2c:c6:2c:2f:b4:6d:87:69:50:03:42:ce:24:44"
      - run:
          name: Create known hosts
          command: |
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Run deploy script
          command: |
            touch target/staging/.nojekyll
            mkdir target/staging/.circleci
            cp .circleci/config.yml target/staging/.circleci
            bash .circleci/deploy.sh --push-only -v -m "Deploying website [ci deploy skip]"
workflows:
  releases:
    jobs:
      - build-and-test:
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /v[0-9]+(\.[0-9]+)*.*/
      - deploy-release:
          requires:
            - build-and-test
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /v[0-9]+(\.[0-9]+)*.*/
      - deploy-site:
          requires:
            - deploy-release
          filters:
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /v[0-9]+(\.[0-9]+)*.*/
  snapshots:
    jobs:
      - build-and-test:
          filters:
            branches:
              ignore: nist-pages
      - deploy-snapshot:
          requires:
          - build-and-test
          filters:
            branches:
              only: master
 